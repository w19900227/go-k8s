package services

import (
// 	"net/http"
	"fmt"
// 	"encoding/json"
// 	"strconv"
// 	"io/ioutil"
// 	"strings"
// 	"io"
)

import (
	// "fmt"
	bs "./baseService"
	"../models"
)

type CreateService struct {
	bs.BaseService
	// bm.BaseModel
}

// func (this *BaseService) init() {

	// this.baseurl = "http://192.168.6.13:8080/api/v1"
	// this.namespace = "/namespaces/default/"
	// this.hred_ip = "http://192.168.6.14:8090"
// }

func (this *CreateService) GetTest() string {
	return this.GetBaseUrl()
}

type Test2 struct {
	Status string `json:"status"`
}
func (this *CreateService) GetTest2() string {

    service := models.ServiceModel{}
    data := service.GetPagInfo()

    if len(data.Items) < 1 {
    	fmt.Println("not found data")
    	return "ss"
    }

	// response := struct {
	// 	Status string
	// 	Erron  string
	// 	Errmsg string
	// 	Data   interface{}
	// }
	
	result := map[string]interface{} {}
	var service_list []string
	// var s2 []string

 	for _, data_items := range data.Items {
		// fmt.Println(data.Items[n].Status.Replicas)
		metadata_name := data_items.Metadata.Name
		if metadata_name != "kube-dns" && metadata_name != "kubernetes" {
			result["service_name"] = metadata_name
			// fmt.Println(*data_items.Metadata.Namespace)
			// ss2 := map[string]interface{} {}
			if data_items.Metadata.Labels == nil {
				// s2["label_key"] = "Null"
				// s2["label_value"] = "Null"
				// fmt.Println(s2)
				// s2 = append(s2, "aa")
				// result["label"] = s2
				// result["label"] = append(s2, metadata_name)
			} else {
				
			}
			// fmt.Println("true:",metadata_name)
		}
		service_list
		result["service_tab"] = append(, result)
	}
	fmt.Println(result)
	// fmt.Println(data.Items[0].Status.Replicas)

    // fmt.Println(data.ApiVersion)
    // machine := models.MachineModel{}
    // fmt.Println(machine.GetPagInfo())
	return this.GetBaseUrl()
}

func (this *CreateService) GetService() string {
	return this.GetBaseUrl()
}

func (this *CreateService) GetCluster() string {
	return this.GetBaseUrl()
}

// func (this *CreateService) GetContainer() string {
// 	return this.GetBaseUrl()
// }

// func (this *CreateService) GetMachine() string {
// 	return this.GetBaseUrl()
// }
